import { danger, peril } from "danger"
import { makeExecutableSchema } from "graphql-tools"

// This extends the schema objects generated by graphql-js
import "graphql-schema-utils"
import { GraphQLObjectType, GraphQLScalarType, GraphQLEnumType, GraphQLUnionType } from "graphql"

import { IncomingWebhook, MessageAttachment } from "@slack/client"

const org = "artsy"
const graphQLFile = "_schema.graphql"

// To grab all files that match the original RFC
// https://github.com/search?q=org%3Aartsy+filename%3A_schema.graphql+path%3A%2F+language%3AGraphQL&type=Code
//
const queryForGraphQLFiles = `org:${org} filename:${graphQLFile} path:/ language:GraphQL`
const api = danger.github.api

export default async () => {
  const searchResponse = await api.search.code({ q: queryForGraphQLFiles })
  console.log(`Found ${searchResponse.data.items.length} repos`)
  const reposWithSchema: string[] = searchResponse.data.items.map((i: any) => i.repository.name)

  reposWithSchema.forEach(async repoName => {
    const now = new Date()
    now.setDate(now.getDate() - 7)
    const weekAgoISO = now.toISOString()

    // Grab the commits that are on the graphql schema in the last week, so we can get the last
    // if there's over 100 commits _to the schema_ in a week, I'd be impressed
    const q = {
      owner: org,
      repo: repoName,
      per_page: 100,
      path: graphQLFile,
      since: weekAgoISO,
    }
    const commitsSinceLastWeek = await api.repos.getCommits(q)
    const commitLength = commitsSinceLastWeek.data.length

    if (!commitLength) {
      console.log(`Skipping GraphQL diff for ${org}/${repoName}, due to no activity.`)
      return
    }
    console.log(`Found ${commitLength} commits for ${org}/${repoName}`)

    const lastCommit = commitsSinceLastWeek.data[commitLength - 1]
    console.log(`Looking at the difference between master and ${lastCommit.sha} for ${org}/${repoName}`)

    const masterSDL = await danger.github.utils.fileContents("_schema.graphql", `${org}/${repoName}`, "master")
    const oldSDL = await danger.github.utils.fileContents("_schema.graphql", `${org}/${repoName}`, lastCommit.sha)

    if (!oldSDL) {
      console.log(`No _schema.graphql found back in ${lastCommit.sha}`)
      return
    }

    const makeSchema = (sdl: string) =>
      makeExecutableSchema({
        typeDefs: [sdl],
        resolverValidationOptions: {
          requireResolversForResolveType: false,
          requireResolversForAllFields: false,
          requireResolversForNonScalar: false,
          requireResolversForArgs: false,
        },
      })

    const masterSchema = makeSchema(masterSDL)
    const oldSchema = makeSchema(oldSDL)

    // See: https://github.com/jarwol/graphql-schema-utils/blob/master/lib/diff.js
    //
    type GraphQLy =
      | GraphQLObjectType
      | GraphQLScalarType
      | GraphQLEnumType
      // | GraphQLNonNull<GraphQLObjectType>
      // | GraphQLList<GraphQLObjectType>
      | GraphQLUnionType

    type DiffTypes =
      | "TypeDescriptionDiff"
      | "TypeMissing"
      | "TypeNameDiff"
      | "BaseTypeDiff"
      | "UnionTypeDiff"
      | "InterfaceDiff"
      | "FieldDescriptionDiff"
      | "FieldMissing"
      | "FieldDiff"
      | "ArgDescriptionDiff"
      | "ArgDiff"
      | "EnumDiff"

    type GraphQLDiff = {
      /** Reference from the old schema */
      thisType: GraphQLy
      /** Reference from the new schema */
      otherType: GraphQLy
      diffType: DiffTypes
      backwardsCompatible: boolean
    }

    const diffs: GraphQLDiff[] = (oldSchema as any).diff(masterSchema)

    // thisType = old schema
    // otherType = new schema

    const codeJoin = (arr: string[]) => arr.map(a => "`" + a + "`").join(", ")
    const messages: MessageAttachment[] = []

    const addedTypeMessages = diffs.filter(d => d.diffType == "TypeMissing" && d.otherType).map(d => d.otherType.name)
    if (addedTypeMessages.length) {
      messages.push({ color: "good", text: "Added:" + codeJoin(addedTypeMessages) })
    }

    const removedTypesMessages = diffs.filter(d => d.diffType == "TypeMissing" && d.thisType).map(d => d.thisType.name)
    if (removedTypesMessages.length) {
      messages.push({ color: "danger", text: "Removed: " + codeJoin(removedTypesMessages) })
    }

    // Grab root query field changes, as they tend to be really useful to know about
    const newRootQueriesTypesMessages = diffs.filter(d => d.diffType == "FieldMissing" && d.thisType.name === "Query")
    if (newRootQueriesTypesMessages.length) {
      const oldQuery = newRootQueriesTypesMessages[0].thisType as GraphQLObjectType
      const newQuery = newRootQueriesTypesMessages[0].otherType as GraphQLObjectType
      const newFields = Object.keys(newQuery.getFields())
      const oldFields = Object.keys(oldQuery.getFields())
      const diff = newFields.filter(f => !oldFields.includes(f))
      messages.push({ color: "good", text: "New root query fields: " + codeJoin(diff) })
    }

    // TODO: There are probably more things we can show in here

    // If there are any messages to send, wrap them up in a slack message with a link to the full compare url.
    if (messages.length) {
      var url = peril.env.SLACK_RFC_WEBHOOK_URL || ""
      var webhook = new IncomingWebhook(url)

      const compareURL = `https://github.com/${org}/${repoName}/compare/${lastCommit.sha}...master`
      await webhook.send({
        unfurl_links: false,
        text: `GraphQL Schema changes on \`${repoName}\``,
        attachments: [...messages, { title: "Diff for last week", title_link: compareURL }],
      })
    }
  })
}
